
///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ 1С

#Область Обработки1С

Функция Интерфейс(Компонента) Экспорт
	
	ОбъектОписанияЗащиты = новый ОписаниеЗащитыОтОпасныхДействий;
	ОбъектОписанияЗащиты.ПредупреждатьОбОпасныхДействиях = Ложь;	
	
	ФайлEPF = Новый Файл(РасположениеКомпоненты(Компонента) + Разделитель() + Компонента.EPF);
	Если Не ФайлEPF.Существует() Тогда
		УстановитьВерсию(Компонента);		
	КонецЕсли;
		
	ВнешняяОбработка = ВнешниеОбработки.Создать(
		ФайлEPF.ПолноеИмя,
		Ложь,
		ОбъектОписанияЗащиты	
	); 
	
	ВнешняяОбработка.Компонента = Компонента;
	
	Возврат ВнешняяОбработка;
	
КонецФункции

#КонецОбласти


Функция КомпонентаПоНаименованию(Наименование) Экспорт
	
	Возврат Справочники.КомпонентыJava.НайтиПоНаименованию(Наименование, Истина);
	
КонецФункции

Функция КомпонентаПоПорту(Порт) Экспорт
	
	Возврат Справочники.КомпонентыJava.НайтиПоРеквизиту("Порт", Порт);
	
КонецФункции

Функция КомпонентаПоРепозиторию(Репозиторий) Экспорт
	
	Возврат Справочники.КомпонентыJava.НайтиПоРеквизиту("GitHubРепозиторий", Репозиторий);
	
КонецФункции


///////////////////////////////////////////////////////////////////////////////
// КОМПОНЕНТЫ

#Область Компоненты

// Функция для запуска JAR-файла
//
// Параметры:
//  Компонента		 - СправочникСсылка.КомпонентыJava - Компонента
//  ОписаниеОшибки	 - Строка, Неопределено - Описание будет заполнено в случае возникновения ошибки
// 
// Возвращаемое значение:
//  Булево - Результат запуска компоненты
//
Функция ЗапуститьКомпоненту(Компонента, ОписаниеОшибки = Неопределено) Экспорт
	
	Результат = Ложь;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();	
	ЭтоWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64;
		
	ИмяФайлаJava = "";
	JAVA_HOME = ПолучитьJAVA_HOME();	
	Если ЗначениеЗаполнено(JAVA_HOME) Тогда
		// Запуск на указанной версии JRE					
		Если ЭтоWindows Тогда
			ИмяФайлаJava = JAVA_HOME + "\bin\java.exe"; 
		Иначе
			ИмяФайлаJava = JAVA_HOME + "/bin/java";	
		КонецЕсли;	
		
		ФайлJava = Новый Файл(ИмяФайлаJava);		
		Если Не ФайлJava.Существует() Тогда
			ОписаниеОшибки = НСтр("ru = 'Проверьте настройки JAVA_HOME (Управление компонентой)'");			
		КонецЕсли;		
	Иначе
		// Запуск на машине "по умолчанию"		
		ИмяФайлаJava = "java";
	КонецЕсли;
	
	JarФайл = Новый Файл(РасположениеКомпоненты(Компонента) + Разделитель() + Компонента.ОсновнойАртефакт);
	Если JarФайл.Существует() Тогда
		ПолноеИмяJarФайла = JarФайл.ПолноеИмя;
		Если ЭтоWindows Тогда
			ПолноеИмяJarФайла = """" + JarФайл.ПолноеИмя + """";
			ИмяФайлаJava = """" + ИмяФайлаJava + """";
		КонецЕсли;	
		СтрокаКоманды = ИмяФайлаJava + " -jar " + ПолноеИмяJarФайла + " -p " + Формат(ПортКомпоненты(Компонента), "ЧГ=0");
		ЗапуститьПриложение(СтрокаКоманды, , Ложь);
		Результат = Истина;
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Исполняемый файл компоненты не найден'");	
	КонецЕсли;			
		
	Возврат Результат;
			
КонецФункции

// Функция для остановки компоненты (kill)
//
// Параметры:
//  Компонента		 - СправочникСсылка.КомпонентыJava - Компонента
// 
// Возвращаемое значение:
//   - 
//
Функция ОстановитьКомпоненту(Компонента) Экспорт
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	// Linux
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86 ИЛИ
		СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64 Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла(".txt");
		Команда = "lsof -i tcp:" + Формат(ПортКомпоненты(Компонента), "ЧГ=0") + " > " + ИмяФайла;
		ЗапуститьПриложение(Команда, , Истина);
		
		Чтение = Новый ЧтениеТекста(ИмяФайла);
		Данные = Новый Массив();
		Строка = Чтение.ПрочитатьСтроку();
		Пока Строка <> Неопределено Цикл
			Данные.Добавить(Строка);
			Строка = Чтение.ПрочитатьСтроку();
		КонецЦикла;		
		Если Данные.Количество() = 2 Тогда
			Слова = РазложитьСтрокуВМассивПодстрок(Данные[1], " ");
			Если Слова.Количество() > 2 Тогда
				Если Слова[0] = "java" Тогда
					ЗапуститьПриложение("kill " + Слова[1], , Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Чтение.Закрыть();
		
		УдалитьФайлы(ИмяФайла);
				
	// Windows
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ
		СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		
		ИмяФайла = ПолучитьИмяВременногоФайла(".txt");
		Команда = "cmd /c netstat -ano | findstr " + Формат(ПортКомпоненты(Компонента), "ЧГ=0") + " > " + """" + ИмяФайла + """";
		ЗапуститьПриложение(Команда, , Истина);
		
		Чтение = Новый ЧтениеТекста(ИмяФайла);
		Данные = Новый Массив();
		Строка = Чтение.ПрочитатьСтроку();
		Пока Строка <> Неопределено Цикл
			Данные.Добавить(Строка);
			Строка = Чтение.ПрочитатьСтроку();
		КонецЦикла;	
		
		Если Данные.Количество() > 0 Тогда
			Для Каждого Строка Из Данные Цикл
				Слова = РазложитьСтрокуВМассивПодстрок(Строка, " ");
				Если Слова.Количество() > 4 Тогда
					Если Слова[4] <> "0" И СтрНайти(Слова[1], Формат(ПортКомпоненты(Компонента), "ЧГ=0")) <> 0 Тогда
						ЗапуститьПриложение("taskkill /F /PID " + Слова[4], , Истина);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Чтение.Закрыть();
		
		УдалитьФайлы(ИмяФайла);
				
	// MacOS
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86 ИЛИ
		СистемнаяИнформация.ТипПлатформы = ТипПлатформы.MacOS_x86_64 Тогда
		
	КонецЕсли;
	
КонецФункции

// Функция для получения порта компоненты (если не задан, то по умолчанию)
//
// Параметры:
//  Компонента	 - СправочникСсылка.КомпонентыJava - Компонента
// 
// Возвращаемое значение:
//  Число - 
//
Функция ПортКомпоненты(Компонента) Экспорт
	
	Возврат Компонента.Порт;
			
КонецФункции

Функция УстановитьКомпоненту(Имя, Детали, ОписаниеОшибки = Неопределено) Экспорт
	
	Результат = Ложь;
	
	Ссылка = Справочники.КомпонентыJava.НайтиПоНаименованию(Имя);
	Если ЗначениеЗаполнено(Ссылка) Тогда
		ВызватьИсключение 
			СтрШаблон(
				НСтр("ru = 'Компонента %1 уже установлена'"),
					Имя
			);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		// Запись в ИБ
		Объект = Справочники.КомпонентыJava.СоздатьЭлемент();
		Объект.УстановитьНовыйКод();
		Объект.Наименование = Имя;
		
		Объект.Порт = Детали.port;
		Объект.GitHubАккаунт     = Детали.github.account;
		Объект.GitHubРепозиторий = Детали.github.repository;
		
		Объект.ОсновнойАртефакт = Детали.github.artifacts.main;
		Объект.EPF = Детали.github.artifacts.epf;		
		Объект.Записать();		
		
		// Скачивание артефактов
		
		
		
		ЗафиксироватьТранзакцию();
		Результат = Истина;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПерейтиНаВерсию(Компонента, Номер) Экспорт
	
	НачатьТранзакцию();
	Попытка
		Объект = Компонента.ПолучитьОбъект();
		Объект.Версия = Номер;		
		Объект.Записать();		
		
		УстановитьВерсию(Компонента);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецФункции

Функция УстановитьВерсию(Компонента) Экспорт
	
	Расположение = РасположениеКомпоненты(Компонента);		
	Файл = Новый Файл(Расположение);
	Если Не Файл.Существует() Тогда
		СоздатьКаталог(Файл.ПолноеИмя);		
	КонецЕсли;
	
	Артефакты = Артефакты(Компонента);
	Если Артефакты = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить артефакты версии'");
	КонецЕсли;
	
	// Скачивание основного артефакта	
	ДвоичныеДанные = ПолучитьАртефакт(Артефакты.ОсновнойАртефакт);
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно получить основной артефакт'");		
	КонецЕсли;
	ДвоичныеДанные.Записать(Расположение + Разделитель() + Компонента.ОсновнойАртефакт);
	
	// Скачивание обработки
	ДвоичныеДанные = ПолучитьАртефакт(Артефакты.EPFАртефакт);
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		ВызватьИсключение НСтр("ru = 'Невозможно получить EPF-артефакт'");		
	КонецЕсли;	
	ДвоичныеДанные.Записать(Расположение + Разделитель() + Компонента.EPF);
		
КонецФункции

#КонецОбласти


///////////////////////////////////////////////////////////////////////////////
// GITHUB API

#Область GitHubAPI

Функция ДоступныеКомпоненты() Экспорт
	
	Результат = Новый Массив();	
	
	Соединение = Новый HTTPСоединение("raw.githubusercontent.com",
		443,
		,
		,
		,
		,
		Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
		
	Запрос = Новый HTTPЗапрос("/alexandrkakushin/comp-java/master/components.json");
	
	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		Результат = ОбъектИзJSON(Ответ.ПолучитьТелоКакСтроку());
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Код ответа: %1; %2'"),
				Ответ.КодСостояния,
				Ответ.ПолучитьТелоКакСтроку());		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДоступныеВерсии(Компонента) Экспорт
	
	Результат = Новый Массив();
	
	GitHubРепозиторий = Компонента.GitHubРепозиторий;
	Если Не ЗначениеЗаполнено(GitHubРепозиторий) Тогда
		ВызватьИсключение НСтр("ru = 'Репозиторий не найден'");
	КонецЕсли;
	
	GitHubАккаунт = Компонента.GitHubАккаунт;
	Если Не ЗначениеЗаполнено(GitHubАккаунт) Тогда
		ВызватьИсключение НСтр("ru = 'Аккаунт не заполнен'");
	КонецЕсли;
		
	GitHubСоединение = Новый HTTPСоединение("api.github.com", 
		443, 
		, 
		, 
		, 
		,
		Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено));
	
	Запрос = Новый HTTPЗапрос("/repos/" + GitHubАккаунт + "/" + GitHubРепозиторий + "/releases");
	Ответ  = GitHubСоединение.Получить(Запрос);
	
	Если Ответ.КодСостояния = 200 Тогда
		Тело = ОбъектИзJSON(Ответ.ПолучитьТелоКакСтроку());
		Для Каждого Релиз Из Тело Цикл
			Запись = Новый Структура("Номер, ОсновнойАртефакт, EPFАртефакт");
			Запись.Номер = Релиз.name;	
			
			Для Каждого Asset Из Релиз.Assets Цикл
				Файл = Новый Файл(Asset.name);
				Если НРег(Файл.Расширение) = НРег(".jar") Тогда         
					Запись.ОсновнойАртефакт = Asset.browser_download_url;	
				ИначеЕсли НРег(Файл.Расширение) = НРег(".epf") Тогда
					Запись.EPFАртефакт = Asset.browser_download_url;					
				КонецЕсли;
			КонецЦикла;
			
			Результат.Добавить(Запись);
		КонецЦикла;		
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Код ответа: %1; %2'"),
				Ответ.КодСостояния,
				Ответ.ПолучитьТелоКакСтроку());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция Артефакты(Компонента)
	
	Результат = Неопределено;
	
	Версии = ДоступныеВерсии(Компонента);
	Для Каждого Версия Из Версии Цикл
		Если Компонента.Версия = Версия.Номер Тогда
			Результат = Версия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


///////////////////////////////////////////////////////////////////////////////
// JRE

#Область ВиртуальныеМашины

Функция ДоступныеJRE() Экспорт
	
	Результат = Новый Массив();
			
	// Windows
	СистемнаяИнформация = Новый СистемнаяИнформация();
	
	ЭтоWindows = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86;
		
	ЭтоLinux = СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86_64
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Linux_x86;
		
	КаталогиПоиска = Новый Массив();
	КаталогиПоиска.Добавить("C:\Program Files\Java");
	КаталогиПоиска.Добавить("C:\Program Files (x86)\Java");
	КаталогиПоиска.Добавить("/usr/local");
	КаталогиПоиска.Добавить("/usr/lib/jvm");
		
	binJava = Неопределено;		
	Если ЭтоWindows Тогда	
		binJava = "\bin\java.exe";		
	ИначеЕсли ЭтоLinux Тогда
		binJava = "/bin/java";		
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого КаталогПоиска Из КаталогиПоиска Цикл
		НайденныеФайлы = НайтиФайлы(КаталогПоиска, "j*", Ложь);
		Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
			
			Если СтрНачинаетсяС(НайденныйФайл.Имя, "jdk") 
				ИЛИ СтрНачинаетсяС(НайденныйФайл.Имя, "jre") 
				ИЛИ СтрНачинаетсяС(НайденныйФайл.Имя, "java") Тогда
				
				ФайлJava = Новый Файл(НайденныйФайл.ПолноеИмя + binJava);
				Если ФайлJava.Существует() Тогда
					Результат.Добавить(НайденныйФайл.ПолноеИмя);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Получение расположения JRE
// 
// Возвращаемое значение:
//  Строка - Значение константы JAVA_HOME
//
Функция ПолучитьJAVA_HOME() Экспорт
	
	Возврат Константы.JAVA_HOME.Получить();
	
КонецФункции

// Установка расположения JRE
//
// Параметры:
//  Значение - Строка - Распложение JRE
//
Процедура УстановитьJAVA_HOME(Значение) Экспорт
	
	Константы.JAVA_HOME.Установить(Значение);
	
КонецПроцедуры

#КонецОбласти


///////////////////////////////////////////////////////////////////////////////
// API (Info)

#Область API_Info

Функция ПроксиКомпоненты(Компонента, ОписаниеОшибки = Неопределено, ПопыткаПодключения = 1) Экспорт
	
	Прокси = Неопределено;	
	Попытка
		АдресWSDL =                                            
			"http://127.0.0.1:" + Формат(ПортКомпоненты(Компонента), "ЧГ=0") + "/InfoService?wsdl";		
		Определение = Новый WSОпределения(АдресWSDL);	
		Прокси = Новый WSПрокси(Определение, "http://info.ak.ru/", "Info", "InfoPort");
	Исключение
		Если ПопыткаПодключения = 1 Тогда
			// Попытка запуска
			Если НЕ ЗапуститьКомпоненту(Компонента, ОписаниеОшибки) Тогда
				Возврат Прокси;			
			КонецЕсли;			
		ИначеЕсли ПопыткаПодключения > 1000 Тогда
			Возврат Прокси;
		КонецЕсли;
		
		Прокси = ПроксиКомпоненты(Компонента, ОписаниеОшибки, ПопыткаПодключения + 1);
	КонецПопытки;
			
	Возврат Прокси;
	
КонецФункции

Функция КомпонентаДоступна(Компонента) Экспорт
	
	Прокси = Неопределено;	
	Попытка
		АдресWSDL = 
			"http://127.0.0.1:" + Формат(ПортКомпоненты(Компонента), "ЧГ=0") + "/InfoService?wsdl";		
		Определение = Новый WSОпределения(АдресWSDL);	
		Прокси = Новый WSПрокси(Определение, "http://info.ak.ru/", "Info", "InfoPort");
	Исключение
	
	КонецПопытки;
		
	Возврат Прокси <> Неопределено;
	
КонецФункции

Функция ВерсияКомпоненты(Компонента, ОписаниеОшибки = Неопределено) Экспорт
	
	Версия = НСтр("ru = 'API компоненты не доступно.'");;	
	
	Прокси = ПроксиКомпоненты(Компонента, ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда		
		Версия = Прокси.version();	
	КонецЕсли;			
	
	Возврат Версия;
		
КонецФункции

Функция ИсторияИзмененийКомпоненты(Компонента, ОписаниеОшибки = Неопределено) Экспорт
	
	Результат = Новый Массив();
	
	Прокси = ПроксиКомпоненты(Компонента, ОписаниеОшибки);
	Если Прокси <> Неопределено Тогда		
		ИсторияИзменений = Прокси.details();
		Для Каждого Запись Из ИсторияИзменений.builds Цикл
			Результат.Добавить(
				Новый Структура("Версия, Описание", Запись.Version, Запись.Description));	
		КонецЦикла;
	КонецЕсли;			
	
	Возврат Результат;
		
КонецФункции

#КонецОбласти


///////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

Функция Разделитель()
	
	Результат = "\";
	
	УстановитьПривилегированныйРежим(Истина);
	
	СистемнаяИнфо = Новый СистемнаяИнформация();
	ТипПлатформыСервера = СистемнаяИнфо.ТипПлатформы;
		
	Если ТипПлатформыСервера = ТипПлатформы.Linux_x86 ИЛИ ТипПлатформыСервера = ТипПлатформы.Linux_x86_64 Тогда
		Результат = "/";			
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция СтруктураURI(Знач СтрокаURI) Экспорт
	
	СтрокаURI = СокрЛП(СтрокаURI);
	
	// схема
	Схема = "";
	Позиция = Найти(СтрокаURI, "://");
	Если Позиция > 0 Тогда
		Схема = НРег(Лев(СтрокаURI, Позиция - 1));
		СтрокаURI = Сред(СтрокаURI, Позиция + 3);
	КонецЕсли;

	// строка соединения и путь на сервере
	СтрокаСоединения = СтрокаURI;
	ПутьНаСервере = "";
	Позиция = Найти(СтрокаСоединения, "/");
	Если Позиция > 0 Тогда
		ПутьНаСервере = Сред(СтрокаСоединения, Позиция + 1);
		СтрокаСоединения = Лев(СтрокаСоединения, Позиция - 1);
	КонецЕсли;
		
	// информация пользователя и имя сервера
	СтрокаАвторизации = "";
	ИмяСервера = СтрокаСоединения;
	Позиция = Найти(СтрокаСоединения, "@");
	Если Позиция > 0 Тогда
		СтрокаАвторизации = Лев(СтрокаСоединения, Позиция - 1);
		ИмяСервера = Сред(СтрокаСоединения, Позиция + 1);
	КонецЕсли;
	
	// логин и пароль
	Логин = СтрокаАвторизации;
	Пароль = "";
	Позиция = Найти(СтрокаАвторизации, ":");
	Если Позиция > 0 Тогда
		Логин = Лев(СтрокаАвторизации, Позиция - 1);
		Пароль = Сред(СтрокаАвторизации, Позиция + 1);
	КонецЕсли;
	
	// хост и порт
	Хост = ИмяСервера;
	Порт = "";
	Позиция = Найти(ИмяСервера, ":");
	Если Позиция > 0 Тогда
		Хост = Лев(ИмяСервера, Позиция - 1);
		Порт = Сред(ИмяСервера, Позиция + 1);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Схема", Схема);
	Результат.Вставить("Логин", Логин);
	Результат.Вставить("Пароль", Пароль);
	Результат.Вставить("ИмяСервера", ИмяСервера);
	Результат.Вставить("Хост", Хост);
	Результат.Вставить("Порт", ?(Порт <> "", Число(Порт), Неопределено));
	Результат.Вставить("ПутьНаСервере", ПутьНаСервере);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАртефакт(Ссылка)
	
	Результат = Неопределено;
	
	СтруктураURI = СтруктураURI(Ссылка);
	
	Соединение = Новый HTTPСоединение(СтруктураURI.Хост,
		СтруктураURI.Порт,
		,
		,
		,
		,
		?(НРег(СтруктураURI.Схема) = НРег("https"), 
			Новый ЗащищенноеСоединениеOpenSSL(Неопределено, Неопределено), Неопределено));
		
	Запрос = Новый HTTPЗапрос("/" + СтруктураURI.ПутьНаСервере);
		
	Ответ = Соединение.Получить(Запрос);
	Если Ответ.КодСостояния = 200 Тогда
		Результат = Ответ.ПолучитьТелоКакДвоичныеДанные();
		
	ИначеЕсли Ответ.КодСостояния = 302 Тогда
		ЧтениеXML = Новый ЧтениеXML();
	    ЧтениеXML.ОткрытьПоток(Ответ.ПолучитьТелоКакПоток());	 
		
		Ссылка = Неопределено;
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если НРег(ЧтениеXML.Имя) = НРег("a") Тогда
					Ссылка = ЧтениеXML.ЗначениеАтрибута("href");
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Ссылка = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось получить ссылку для получения артефакта'");			
		КонецЕсли;
		
		Возврат ПолучитьАртефакт(Ссылка);
		
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Код ответа: %1; %2'"),
				Ответ.КодСостояния,
				Ответ.ПолучитьТелоКакСтроку());		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РасположениеКомпоненты(Компонента)
	
	Возврат СтрШаблон("%1%2_%3", КаталогВременныхФайлов(), Компонента.GitHubРепозиторий, Компонента.Версия);	
	
КонецФункции

// Разбивает строку на несколько строк по разделителю. Разделитель может иметь любую длину.
//
// Параметры:
//  Строка                 - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Примеры:
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",") - возвратит массив из 5 элементов, три из которых  - пустые строки;
//  РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина) - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок(" один   два  ", " ") - возвратит массив из двух элементов;
//  РазложитьСтрокуВМассивПодстрок("") - возвратит пустой массив;
//  РазложитьСтрокуВМассивПодстрок("",,Ложь) - возвратит массив с одним элементом "" (пустой строкой);
//  РазложитьСтрокуВМассивПодстрок("", " ") - возвратит массив с одним элементом "" (пустой строкой);
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Строка, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// для обеспечения обратной совместимости
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Строка) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = Найти(Строка, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Строка, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Строка = Сред(Строка, Позиция + СтрДлина(Разделитель));
		Позиция = Найти(Строка, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Строка) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Строка));
		Иначе
			Результат.Добавить(Строка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 


///////////////////////////////////////////////////////////////////////////////
// JSON - Объект

Функция ОбъектИзJSON(СтрокаJSON) Экспорт
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);

	Результат = ПрочитатьJSON(ЧтениеJSON);
		
	ЧтениеJSON.Закрыть();
	
	Возврат Результат;
	
КонецФункции

Функция ОбъектВJSON(Объект, ПереносСтрок = Истина) Экспорт
	
	ЗаписьJSON = Новый ЗаписьJSON();
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(
		?(ПереносСтрок, ПереносСтрокJSON.Авто, ПереносСтрокJSON.Нет), 
		Символы.Таб);
	
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписиJSON);
	ЗаписатьJSON(ЗаписьJSON, Объект);
	РезультатJSON = ЗаписьJSON.Закрыть();
	
	Возврат РезультатJSON;
	
КонецФункции

#КонецОбласти
